diff --git a/lib/jpegli.cmake b/lib/jpegli.cmake
index 1111111..2222222 100644
--- a/lib/jpegli.cmake
+++ b/lib/jpegli.cmake
@@ -24,12 +24,30 @@ elseif(JPEGLI_LIBJPEG_LIBRARY_SOVERSION STREQUAL "8")
   set(JPEG_LIB_VERSION 80)
 endif()

-configure_file(
-  ../third_party/libjpeg-turbo/jconfig.h.in include/jpegli/jconfig.h)
-configure_file(
-  ../third_party/libjpeg-turbo/jpeglib.h include/jpegli/jpeglib.h COPYONLY)
-configure_file(
-  ../third_party/libjpeg-turbo/jmorecfg.h include/jpegli/jmorecfg.h COPYONLY)
+# Force system dependencies.
+set(JPEGXL_FORCE_SYSTEM_JPEG_TURBO false CACHE BOOL
+    "Force using system installed jpegturbo instead of third_party/libjpeg-turbo source.")
+
+find_package(JPEG)
+
+if (NOT EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/libjpeg-turbo/jpeglib.h" OR
+    JPEGXL_FORCE_SYSTEM_JPEG_TURBO)
+  if (NOT JPEG_FOUND)
+    message(FATAL_ERROR
+         "JPEG not found, install libjpeg62-turbo and libjpeg62-turbo-dev or"
+         " download libjpeg-turbo source to third_party/libjpeg-turbo from"
+         " https://github.com/libjpeg-turbo/libjpeg-turbo. You can use"
+         " ${PROJECT_SOURCE_DIR}/deps.sh to download this dependency.")
+  endif()
+else()
+  configure_file(
+    ../third_party/libjpeg-turbo/jconfig.h.in include/jpegli/jconfig.h)
+  configure_file(
+    ../third_party/libjpeg-turbo/jpeglib.h include/jpegli/jpeglib.h COPYONLY)
+  configure_file(
+    ../third_party/libjpeg-turbo/jmorecfg.h include/jpegli/jmorecfg.h COPYONLY)
+  configure_file(
+    ../third_party/libjpeg-turbo/jerror.h include/jpegli/jerror.h COPYONLY)
+endif()

-add_library(jpegli-static STATIC EXCLUDE_FROM_ALL "${JPEGXL_INTERNAL_JPEGLI_SOURCES}")
-target_compile_options(jpegli-static PRIVATE "${JPEGXL_INTERNAL_FLAGS}")
-target_compile_options(jpegli-static PUBLIC ${JPEGXL_COVERAGE_FLAGS})
-set_property(TARGET jpegli-static PROPERTY POSITION_INDEPENDENT_CODE ON)
-target_include_directories(jpegli-static PRIVATE
-  "$<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}>"
-  "${JXL_HWY_INCLUDE_DIRS}")
-target_include_directories(jpegli-static PUBLIC
-  "$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include/jpegli>")
-target_link_libraries(jpegli-static PUBLIC ${JPEGLI_INTERNAL_LIBS})
+add_library(jpegli-obj OBJECT "${JPEGXL_INTERNAL_JPEGLI_SOURCES}")
+set_target_properties(jpegli-obj PROPERTIES POSITION_INDEPENDENT_CODE ON)
+target_compile_options(jpegli-obj
+  PUBLIC "${JPEGXL_COVERAGE_FLAGS}"
+  PRIVATE "${JPEGXL_INTERNAL_FLAGS}")
+target_include_directories(jpegli-obj
+  PUBLIC "$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include/jpegli>"
+  PRIVATE "$<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}>"
+          "${JXL_HWY_INCLUDE_DIRS}")

 # Tests for jpegli
 if(JPEG_FOUND AND BUILD_TESTING)
   add_library(jpegli_libjpeg_util-obj OBJECT
     ${JPEGXL_INTERNAL_JPEGLI_LIBJPEG_HELPER_FILES})
   target_include_directories(jpegli_libjpeg_util-obj PRIVATE
     "${PROJECT_SOURCE_DIR}"
     "${JPEG_INCLUDE_DIRS}")
   target_compile_options(jpegli_libjpeg_util-obj PRIVATE
     "${JPEGXL_INTERNAL_FLAGS}" "${JPEGXL_COVERAGE_FLAGS}")

   file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/tests)
   foreach (TESTFILE IN LISTS JPEGXL_INTERNAL_JPEGLI_TESTS)
     get_filename_component(TESTNAME ${TESTFILE} NAME_WE)
     add_executable(${TESTNAME} ${TESTFILE}
       $<TARGET_OBJECTS:jpegli-obj>
       $<TARGET_OBJECTS:jpegli_libjpeg_util-obj>
       ${JPEGXL_INTERNAL_JPEGLI_TESTLIB_FILES})
     target_compile_options(${TESTNAME} PRIVATE
       ${JPEGXL_INTERNAL_FLAGS}
       ${JPEGXL_COVERAGE_FLAGS})
     target_compile_definitions(${TESTNAME} PRIVATE
       -DTEST_DATA_PATH="${JPEGXL_TEST_DATA_PATH}")
     target_include_directories(${TESTNAME} PRIVATE
       "${PROJECT_SOURCE_DIR}"
       "${CMAKE_CURRENT_SOURCE_DIR}/include"
       "${CMAKE_CURRENT_BINARY_DIR}/include")
     target_link_libraries(${TESTNAME}
       PUBLIC GTest::GTest GTest::Main ${JPEG_LIBRARIES}
       PRIVATE ${JPEGLI_INTERNAL_LIBS})
     set_target_properties(${TESTNAME} PROPERTIES LINK_FLAGS "${JPEGXL_COVERAGE_LINK_FLAGS}")
     set_target_properties(${TESTNAME} PROPERTIES PREFIX "tests/")
     if (WIN32 AND CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
       set_target_properties(${TESTNAME} PROPERTIES COMPILE_FLAGS "-Wno-error")
     endif()
     gtest_discover_tests(${TESTNAME} DISCOVERY_TIMEOUT 240)
   endforeach()
 endif()

@@ -107,6 +107,47 @@
 if (JPEGXL_ENABLE_JPEGLI_LIBJPEG AND NOT APPLE AND NOT WIN32 AND NOT EMSCRIPTEN)
   add_library(jpegli-libjpeg-obj OBJECT "${JPEGXL_INTERNAL_JPEGLI_WRAPPER_SOURCES}")
   target_compile_options(jpegli-libjpeg-obj PRIVATE ${JPEGXL_INTERNAL_FLAGS})
   target_compile_options(jpegli-libjpeg-obj PUBLIC ${JPEGXL_COVERAGE_FLAGS})
   set_property(TARGET jpegli-libjpeg-obj PROPERTY POSITION_INDEPENDENT_CODE ON)
   target_include_directories(jpegli-libjpeg-obj PRIVATE
     "$<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}>"
     "$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include/jpegli>")
   target_compile_definitions(jpegli-libjpeg-obj PUBLIC
     ${JPEGLI_LIBJPEG_OBJ_COMPILE_DEFINITIONS})
   set(JPEGLI_LIBJPEG_INTERNAL_OBJECTS $<TARGET_OBJECTS:jpegli-libjpeg-obj>)

   file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/jpegli)
   add_library(jpeg SHARED ${JPEGLI_LIBJPEG_INTERNAL_OBJECTS})
   target_link_libraries(jpeg PUBLIC ${JPEGXL_COVERAGE_FLAGS})
   target_link_libraries(jpeg PRIVATE jpegli-obj)
   set_target_properties(jpeg PROPERTIES
     VERSION ${JPEGLI_LIBJPEG_LIBRARY_VERSION}
     SOVERSION ${JPEGLI_LIBJPEG_LIBRARY_SOVERSION}
     LIBRARY_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/jpegli"
     RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/jpegli")
   set_target_properties(jpeg PROPERTIES
     LINK_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/jpegli/jpeg.version.${JPEGLI_LIBJPEG_LIBRARY_SOVERSION})
   set_property(TARGET jpeg APPEND_STRING PROPERTY
     LINK_FLAGS " -Wl,--version-script=${CMAKE_CURRENT_SOURCE_DIR}/jpegli/jpeg.version.${JPEGLI_LIBJPEG_LIBRARY_SOVERSION}")

   if (JPEGXL_INSTALL_JPEGLI_LIBJPEG)
     install(TARGETS jpeg
       RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
       LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
       ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})

     if (EXISTS "${CMAKE_CURRENT_BINARY_DIR}/include/jpegli")
       install(
         DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/include/jpegli/"
         DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}")
     endif()
   endif()

   if(LINKER_SUPPORT_EXCLUDE_LIBS)
     set_property(TARGET jpeg APPEND_STRING PROPERTY
       LINK_FLAGS " ${LINKER_EXCLUDE_LIBS_FLAG}")
   endif()
 endif()
-- 
2.45.1